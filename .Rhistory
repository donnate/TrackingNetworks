legend('topleft',legend=c("Post","Pre birth"),col=c(6,4),pch=19)
ubject_graph=graph_from_adjacency_matrix(d, mode = c("undirected"), weighted = TRUE,1:nrow(d))
subject_graph=graph_from_adjacency_matrix(d, mode = c("undirected"), weighted = TRUE,1:nrow(d))
tree=mst(subject_graph,weights = edge_attr(subject_graph, "weight") )
plot(tree,vertex.color=data()$labels_s_post,... = )
legend('topleft',legend=c("Post","Pre birth"),col=c(6,4),pch=19)
plot(tree,vertex.color=labels_s_post)
legend('topleft',legend=c("Post","Pre birth"),col=c(6,4),pch=19)
subject_graph=graph_from_adjacency_matrix(d, mode = c("undirected"), weighted = TRUE,vertices(1:ncol(d)))
tree=mst(subject_graph,weights = edge_attr(subject_graph, "weight") )
tree=mst(subject_graph,weights = edge_attr(subject_graph, "weight"))
plot(tree,vertex.color=labels_s_post)
labels_s_post
s
index_s<-df$SampleID[which(df$SubjectID ==s )]
labels_s_post=df$PostPreg[which(df$SubjectID ==s )]
labels_s_post<-sapply(labels_s_post, FUN=function(x){
ifelse(x,6,4)
})
labels_s_post
load(paste("~/Dropbox/temp/graph_seq",1,".RData",sep=""))
subject_graph=graph_from_adjacency_matrix(d, mode = c("undirected"), weighted = TRUE,)
subject_graph=graph_from_adjacency_matrix(d, mode = c("undirected"), weighted = TRUE,vetices=1:ncol(d))
subject_graph=graph_from_adjacency_matrix(d, mode = c("undirected"), weighted = TRUE,vertices=1:ncol(d))
subject_graph=graph_from_adjacency_matrix(d, mode = c("undirected"), weighted = TRUE)
tree=mst(subject_graph,weights = edge_attr(subject_graph, "weight"))
plot(tree,vertex.color=labels_s_post)
plot(tree,vertex.color=labels_s_post)
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
visualize_results_PNAS()
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
colors_s_post=sapply(which(df$SubjectID ==s ),FUN=function(x){
ifelse(df$Post[x]==TRUE, "red","yellow")
})
plot(tree,vertex.color=colors_s_post)
legend('topleft',legend=c("Post","Pre birth"),col=c("red","yellow"),pch=19)
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
paste("Minimum Spanning Tree for subject",s,  sep=" ")
addendum=ifelse (labels_s_term==1, "(Term Pregnancy)", ifelse(labels_s_term==3, "(Preterm Pregnancy)", "(Marginal Pregnancy)"))
addendum
plot(tree,vertex.color=colors_s_post,main=paste("Minimum Spanning Tree for subject",data()$subject, addendum, sep=" ")
)
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
visualize_results_PNAS()
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
labels_s_term=sapply(which(df$SubjectID ==s ),FUN=function(x){
ifelse(df$Term[x]==TRUE, 1,ifelse(df$Preterm[x]==TRUE, 3, 2))
})
labels_s_term
labels_s_term=labels_s_term[1]
addendum=ifelse (labels_s_term==1, "(Term Pregnancy)", ifelse(labels_s_term==3, "(Preterm Pregnancy)", "(Marginal Pregnancy)"))
addendum
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
addendum
visualize_results_PNAS()
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
x=which(df$SubjectID ==s )[1]
x
df$Term[x]
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
source("~/Dropbox/Food_network/code/visualize_PNAS_res.R")
visualize_results_PNAS()
s=10003
ta<-reactive({
load(file="~/Dropbox/data_post_PNASvis_pb.RData")
load(file="~/Dropbox/data_post_PNASvis_pb.RData")
load(paste("~/Dropbox/temp/graph_seq",1,".RData",sep=""))
subjects=c(10003,10004,10005,10006,10008,10014,10017,10018,10020 ,10022,10023,10028,10031,10032,10034,10036,10039,10040,10043,10045,10046,10047,10101,19005,19007)
index_s<-df$SampleID[which(df$SubjectID ==s )]
labels_s_post=df$PostPreg[which(df$SubjectID ==s )]
labels_s_post<-sapply(labels_s_post, FUN=function(x){
ifelse(x,1,2)
})
temp=sapply(which(df$SubjectID ==s ),FUN=function(x){
ifelse(df$Term[x]==TRUE, 1,ifelse(df$Preterm[x]==TRUE, 3, 2))
})
x=which(df$SubjectID ==s )[1]
addendum=ifelse(df$Term[x], "(Term Pregnancy)", ifelse(df$Preterm[x], "(Preterm Pregnancy)", "(Marginal Pregnancy)"))
subject_graph=graph_from_adjacency_matrix(d, mode = c("undirected"), weighted = TRUE)
tree=mst(subject_graph,weights = edge_attr(subject_graph, "weight"))
dist=triu(d,1)[which(triu(d,1)!=0)]
colors_s_post=sapply(which(df$SubjectID==s),FUN=function(x){
ifelse(df$Post[x], "red","yellow")
})
plot(tree,vertex.color=colors_s_post,main=paste("Minimum Spanning Tree for subject",subject, addendum, sep=" "))
#
plot(tree,vertex.color=colors_s_post,main=paste("Minimum Spanning Tree for subject",s, addendum, sep=" "))
#
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
df=load(paste("~/Dropbox/temp/graph_seq",input$s,".RData",sep=""))
df=load(paste("~/Dropbox/temp/graph_seq",1,".RData",sep=""))
load(file="~/Dropbox/data_post_PNASvis_pb.RData")
x=which(df$SubjectID ==s )
x=which(df$SubjectID ==10003 )
x=which(df$SubjectID ==10003 )[1]
x
df$Term[x]
x=which(df$SubjectID ==s )[1]
s=subjects[1]
subjects=c(10003,10004,10005,10006,10008,10014,10017,10018,10020 ,10022,10023,10028,10031,10032,10034,10036,10039,10040,10043,10045,10046,10047,10101,19005,19007)
s=subjects[1]
s
x=which(df$SubjectID ==s )[1]
addendum=ifelse(df$Term[x], "(Term Pregnancy)", ifelse(df$Preterm[x], "(Preterm Pregnancy)", "(Marginal Pregnancy)"))
labels_s_post=df$PostPreg[which(df$SubjectID ==s )]
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
load(file="~/Dropbox/data_post_PNASvis_pb.RData")
index_s<-df$SampleID[which(df$SubjectID ==s )]
index_s
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
visualize_results_PNAS()
debugSource('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
visualize_results_PNAS()
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
visualize_results_PNAS()
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
s=10003
index_s<-df$SampleID[which(df$SubjectID ==s )]
s=10004
index_s<-df$SampleID[which(df$SubjectID ==s )]
labels_s_post=df$PostPreg[which(df$SubjectID ==s )]
labels_s_post<-sapply(labels_s_post, FUN=function(x){
ifelse(x,1,2)
})
y=which(df$SubjectID ==s )
x=y[1]
addendum=ifelse(df$Term[x], "(Term Pregnancy)", ifelse(df$Preterm[x], "(Preterm Pregnancy)", "(Marginal Pregnancy)"))
labels_s_term=ifelse(df$Term[x], 3, ifelse(df$Preterm[x], 1, 2))
x
subject_graph=graph_from_adjacency_matrix(d, mode = c("undirected"), weighted = TRUE)
tree=mst(subject_graph,weights = edge_attr(subject_graph, "weight"))
dist=triu(d,1)[which(triu(d,1)!=0)]
colors_s_post=sapply(which(df$SubjectID==s),FUN=function(x){
ifelse(df$Post[x], "red","yellow")
})
colors_s_post
data<-function()({
load(file="~/Dropbox/data_post_PNASvis_pb.RData")
load(paste("~/Dropbox/temp/graph_seq",input$s,".RData",sep=""))
subjects=c(10003,10004,10005,10006,10008,10014,10017,10018,10020 ,10022,10023,10028,10031,10032,10034,10036,10039,10040,10043,10045,10046,10047,10101,19005,19007)
s=subjects[input$s]
index_s<-df$SampleID[which(df$SubjectID ==s )]
labels_s_post=df$PostPreg[which(df$SubjectID ==s )]
labels_s_post<-sapply(labels_s_post, FUN=function(x){
ifelse(x,1,2)
})
y=which(df$SubjectID ==s )
x=y[1]
addendum=ifelse(df$Term[x], "(Term Pregnancy)", ifelse(df$Preterm[x], "(Preterm Pregnancy)", "(Marginal Pregnancy)"))
labels_s_term=ifelse(df$Term[x], 3, ifelse(df$Preterm[x], 1, 2))
subject_graph=graph_from_adjacency_matrix(d, mode = c("undirected"), weighted = TRUE)
tree=mst(subject_graph,weights = edge_attr(subject_graph, "weight"))
dist=triu(d,1)[which(triu(d,1)!=0)]
colors_s_post=sapply(which(df$SubjectID==s),FUN=function(x){
ifelse(df$Post[x], "red","yellow")
})
return(list(addendum=addendum,tree=tree,labels_s_post=labels_s_post,df=df,d=d,dist=dist))
#return(list(tree=tree,df=df,labels_s_post=labels_s_post,colors_s_post=colors_s_post,labels_s_term=labels_s_term,d=d,dist=dist,subject=s, addendum=addendum))
}
)
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
input=list(s=1)
load(file="~/Dropbox/data_post_PNASvis_pb.RData")
load(paste("~/Dropbox/temp/graph_seq",input$s,".RData",sep=""))
subjects=c(10003,10004,10005,10006,10008,10014,10017,10018,10020 ,10022,10023,10028,10031,10032,10034,10036,10039,10040,10043,10045,10046,10047,10101,19005,19007)
s=subjects[input$s]
index_s<-df$SampleID[which(df$SubjectID ==s )]
labels_s_post=df$PostPreg[which(df$SubjectID ==s )]
labels_s_post<-sapply(labels_s_post, FUN=function(x){
ifelse(x,1,2)
})
input=list(s=1)
load(file="~/Dropbox/data_post_PNASvis_pb.RData")
load(paste("~/Dropbox/temp/graph_seq",input$s,".RData",sep=""))
subjects=c(10003,10004,10005,10006,10008,10014,10017,10018,10020 ,10022,10023,10028,10031,10032,10034,10036,10039,10040,10043,10045,10046,10047,10101,19005,19007)
s=subjects[input$s]
index_s<-df$SampleID[which(df$SubjectID ==s )]
labels_s_post=df$PostPreg[which(df$SubjectID ==s )]
labels_s_post<-sapply(labels_s_post, FUN=function(x){
ifelse(x,1,2)
})
y=which(df$SubjectID ==s )
x=y[1]
addendum=ifelse(df$Term[x], "(Term Pregnancy)", ifelse(df$Preterm[x], "(Preterm Pregnancy)", "(Marginal Pregnancy)"))
labels_s_term=ifelse(df$Term[x], 3, ifelse(df$Preterm[x], 1, 2))
subject_graph=graph_from_adjacency_matrix(d, mode = c("undirected"), weighted = TRUE)
tree=mst(subject_graph,weights = edge_attr(subject_graph, "weight"))
dist=triu(d,1)[which(triu(d,1)!=0)]
colors_s_post=sapply(which(df$SubjectID==s),FUN=function(x){
ifelse(df$Post[x], "red","yellow")
})
#return(list(addendum=addendum,tree=tree,labels_s_post=labels_s_post,df=df,d=d,dist=dist))
list(tree=tree,df=df,labels_s_post=labels_s_post,colors_s_post=colors_s_post,labels_s_term=labels_s_term,d=d,dist=dist,subject=s, addendum=addendum)
addendum=ifelse(df$Term[x], "(Term Pregnancy)", ifelse(df$Preterm[x], "(Preterm Pregnancy)", "(Marginal Pregnancy)"))
labels_s_term=ifelse(df$Term[x], 3, ifelse(df$Preterm[x], 1, 2))
subject_graph=graph_from_adjacency_matrix(d, mode = c("undirected"), weighted = TRUE)
tree=mst(subject_graph,weights = edge_attr(subject_graph, "weight"))
dist=triu(d,1)[which(triu(d,1)!=0)]
colors_s_post=sapply(which(df$SubjectID==s),FUN=function(x){
ifelse(df$Post[x], "red","yellow")
})
#return(list(addendum=addendum,tree=tree,labels_s_post=labels_s_post,df=df,d=d,dist=dist))
Mydata=list(tree=tree,df=df,labels_s_post=labels_s_post,colors_s_post=colors_s_post,labels_s_term=labels_s_term,d=d,dist=dist,subject=s, addendum=addendum)
tree=Mydata$tree
df=Mydata$df
plot(tree,vertex.color=colors_s_post,main=paste("Minimum Spanning Tree for subject", Mydata()$subject, Mydata()$addendum, sep=" "))
#plot(tree,vertex.color=colors_s_post)
legend('topleft',legend=c("Post","Pre birth"),col=c("red","yellow"),pch=19)
plot(tree,vertex.color=colors_s_post,main=paste("Minimum Spanning Tree for subject", Mydata$subject, Mydata$addendum, sep=" "))
#plot(tree,vertex.color=colors_s_post)
legend('topleft',legend=c("Post","Pre birth"),col=c("red","yellow"),pch=19)
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
input$s=5
View(df)
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
View(df)
visualize_results_PNAS()
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
y=which(df$SubjectID ==s )
xx=y[1]
ddendum=ifelse(df$Term[xx], "(Term Pregnancy)", ifelse(df$Preterm[xx], "(Preterm Pregnancy)", "(Marginal Pregnancy)"))
labels_s_term=ifelse(df$Term[xx], 3, ifelse(df$Preterm[xx], 1, 2))
addendum=ifelse(df$Term[xx], "(Term Pregnancy)", ifelse(df$Preterm[xx], "(Preterm Pregnancy)", "(Marginal Pregnancy)"))
labels_s_term=ifelse(df$Term[xx], 3, ifelse(df$Preterm[xx], 1, 2))
subject_graph=graph_from_adjacency_matrix(d, mode = c("undirected"), weighted = TRUE)
tree=mst(subject_graph,weights = edge_attr(subject_graph, "weight"))
dist=triu(d,1)[which(triu(d,1)!=0)]
colors_s_post=sapply(which(df$SubjectID==s),FUN=function(x){
ifelse(df$Post[x], "red","yellow")
})
tree=mst(subject_graph,weights = edge_attr(subject_graph, "weight"))
plot(tree,vertex.color=colors_s_post,main=paste("Minimum Spanning Tree for subject", subject, addendum, sep=" "))
plot(tree,vertex.color=colors_s_post,main=paste("Minimum Spanning Tree for subject", s, addendum, sep=" "))
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
visualize_results_PNAS()
source('~/Dropbox/Food_network/code/visualize_PNAS_res.R')
visualize_results_PNAS()
it=1
for ( s in subjects){
print(s)
load(paste("~/Dropbox/temp/graph_seq",it,".RData",sep=""))
index_s<-df$SampleID[which(df$SubjectID ==s )]
labels_s_post=df$PostPreg[which(df$SubjectID ==s )]
labels_s_post<-sapply(labels_s_post, FUN=function(x){
ifelse(x,1,2)
})
y=which(df$SubjectID ==s )
xx=y[1]
addendum=ifelse(df$Term[xx], "(Term Pregnancy)", ifelse(df$Preterm[xx], "(Preterm Pregnancy)", "(Marginal Pregnancy)"))
labels_s_term=ifelse(df$Term[xx], 3, ifelse(df$Preterm[xx], 1, 2))
subject_graph=graph_from_adjacency_matrix(d, mode = c("undirected"), weighted = TRUE)
tree=mst(subject_graph,weights = edge_attr(subject_graph, "weight"))
dist=triu(d,1)[which(triu(d,1)!=0)]
colors_s_post=sapply(which(df$SubjectID==s),FUN=function(x){
ifelse(df$Post[x], "red","yellow")
})
save(list(addendum=addendum,tree=tree,labels_s_post=labels_s_post,df=df,d=d,dist=dist),file=paste("~/Dropbox/temp/graph_seq_complete",it,".RData",sep=""))
it=it+1
}
it=1
for ( s in subjects){
print(s)
load(paste("~/Dropbox/temp/graph_seq",it,".RData",sep=""))
index_s<-df$SampleID[which(df$SubjectID ==s )]
labels_s_post=df$PostPreg[which(df$SubjectID ==s )]
labels_s_post<-sapply(labels_s_post, FUN=function(x){
ifelse(x,1,2)
})
y=which(df$SubjectID ==s )
xx=y[1]
addendum=ifelse(df$Term[xx], "(Term Pregnancy)", ifelse(df$Preterm[xx], "(Preterm Pregnancy)", "(Marginal Pregnancy)"))
labels_s_term=ifelse(df$Term[xx], 3, ifelse(df$Preterm[xx], 1, 2))
subject_graph=graph_from_adjacency_matrix(d, mode = c("undirected"), weighted = TRUE)
tree=mst(subject_graph,weights = edge_attr(subject_graph, "weight"))
dist=triu(d,1)[which(triu(d,1)!=0)]
colors_s_post=sapply(which(df$SubjectID==s),FUN=function(x){
ifelse(df$Post[x], "red","yellow")
})
res=list(addendum=addendum,tree=tree,labels_s_post=labels_s_post,df=df,d=d,dist=dist,colors_s_post=colors_s_post,labels_s_term=labels_s_term)
save(res,file=paste("~/Dropbox/temp/graph_seq_complete",it,".RData",sep=""))
it=it+1
}
source('~/visualize_PNAS_res2.R')
visualize_results_PNAS()
subjects[6]
df$PostPreg[which(df$SubjectID ==10014)]
visualize_results_PNAS()
source('~/visualize_PNAS_res2.R')
visualize_results_PNAS()
source('~/visualize_PNAS_res2.R')
source('~/visualize_PNAS_res2.R')
visualize_results_PNAS()
it=1
for ( s in subjects){
print(s)
load(paste("~/Dropbox/temp/graph_seq",it,".RData",sep=""))
index_s<-df$SampleID[which(df$SubjectID ==s )]
labels_s_post=df$PostPreg[which(df$SubjectID ==s )]
labels_s_post<-sapply(labels_s_post, FUN=function(x){
ifelse(x,1,2)
})
y=which(df$SubjectID ==s )
xx=y[1]
addendum=ifelse(df$Term[xx], "(Term Pregnancy)", ifelse(df$Preterm[xx], "(Preterm Pregnancy)", "(Marginal Pregnancy)"))
labels_s_term=ifelse(df$Term[xx], 3, ifelse(df$Preterm[xx], 1, 2))
subject_graph=graph_from_adjacency_matrix(d, mode = c("undirected"), weighted = TRUE)
tree=mst(subject_graph,weights = edge_attr(subject_graph, "weight"))
dist=triu(d,1)[which(triu(d,1)!=0)]
colors_s_post=sapply(which(df$SubjectID==s),FUN=function(x){
ifelse(df$Post[x], "red","yellow")
})
res=list(addendum=addendum,tree=tree,labels_s_post=labels_s_post,df=df,d=d,dist=dist,colors_s_post=colors_s_post,subject=s,labels_s_term=labels_s_term)
save(res,file=paste("~/Dropbox/temp/graph_seq_complete",it,".RData",sep=""))
it=it+1
}
subjects=c(10003,10004,10005,10006,10008,10014,10017,10018,10020 ,10022,10023,10028,10031,10032,10034,10036,10039,10040,10043,10045,10046,10047,10101,19005,19007)
it=1
for ( s in subjects){
print(s)
load(paste("~/Dropbox/temp/graph_seq",it,".RData",sep=""))
index_s<-df$SampleID[which(df$SubjectID ==s )]
labels_s_post=df$PostPreg[which(df$SubjectID ==s )]
labels_s_post<-sapply(labels_s_post, FUN=function(x){
ifelse(x,1,2)
})
y=which(df$SubjectID ==s )
xx=y[1]
addendum=ifelse(df$Term[xx], "(Term Pregnancy)", ifelse(df$Preterm[xx], "(Preterm Pregnancy)", "(Marginal Pregnancy)"))
labels_s_term=ifelse(df$Term[xx], 3, ifelse(df$Preterm[xx], 1, 2))
subject_graph=graph_from_adjacency_matrix(d, mode = c("undirected"), weighted = TRUE)
tree=mst(subject_graph,weights = edge_attr(subject_graph, "weight"))
dist=triu(d,1)[which(triu(d,1)!=0)]
colors_s_post=sapply(which(df$SubjectID==s),FUN=function(x){
ifelse(df$Post[x], "red","yellow")
})
res=list(addendum=addendum,tree=tree,labels_s_post=labels_s_post,df=df,d=d,dist=dist,colors_s_post=colors_s_post,subject=s,labels_s_term=labels_s_term)
save(res,file=paste("~/Dropbox/temp/graph_seq_complete",it,".RData",sep=""))
it=it+1
}
subjects=c(10003,10004,10005,10006,10008,10014,10017,10018,10020 ,10022,10023,10028,10031,10032,10034,10036,10039,10040,10043,10045,10046,10047,10101,19005,19007)
load(file="~/Dropbox/data_post_PNASvis_pb.RData")
it=1
for ( s in subjects){
print(s)
load(paste("~/Dropbox/temp/graph_seq",it,".RData",sep=""))
index_s<-df$SampleID[which(df$SubjectID ==s )]
labels_s_post=df$PostPreg[which(df$SubjectID ==s )]
labels_s_post<-sapply(labels_s_post, FUN=function(x){
ifelse(x,1,2)
})
y=which(df$SubjectID ==s )
xx=y[1]
addendum=ifelse(df$Term[xx], "(Term Pregnancy)", ifelse(df$Preterm[xx], "(Preterm Pregnancy)", "(Marginal Pregnancy)"))
labels_s_term=ifelse(df$Term[xx], 3, ifelse(df$Preterm[xx], 1, 2))
subject_graph=graph_from_adjacency_matrix(d, mode = c("undirected"), weighted = TRUE)
tree=mst(subject_graph,weights = edge_attr(subject_graph, "weight"))
dist=triu(d,1)[which(triu(d,1)!=0)]
colors_s_post=sapply(which(df$SubjectID==s),FUN=function(x){
ifelse(df$Post[x], "red","yellow")
})
res=list(addendum=addendum,tree=tree,labels_s_post=labels_s_post,df=df,d=d,dist=dist,colors_s_post=colors_s_post,subject=s,labels_s_term=labels_s_term)
save(res,file=paste("~/Dropbox/temp/graph_seq_complete",it,".RData",sep=""))
it=it+1
}
source('~/visualize_PNAS_res2.R')
visualize_results_PNAS()
source('~/Downloads/dynamicnetwork/R/percolate.dynamic.r')
source('~/Downloads/dynamicnetwork/R/buildInfectNet.R')
install.packages("cairoDevice")
source('~/Dropbox/GSP/tests_real/microbiome_analysis/data/main_R.R')
install.packages("gWidgetsRGtk2")
source('~/Dropbox/GSP/tests_real/microbiome_analysis/data/main_R.R')
source('~/Dropbox/GSP/tests_real/microbiome_analysis/data/main_R.R')
install.packages("RGtk2Extras")
install.packages("RGtk2")
source('~/Dropbox/GSP/tests_real/microbiome_analysis/data/main_R.R')
install.packages("RGtk2", depen=T, type="source")
options(repos = "http://cran.stat.auckland.ac.nz")
install.packages(c("gWidgets", "RGtk2", "gWidgetsRGtk2", "devtools"))
install.packages(c("gWidgets", "RGtk2", "gWidgetsRGtk2", "devtools"))
library(gWidgetsRGtk2)
gbutton("This works!", container = gwindow("Test"), handler = function(h, ...){ dispose(h$obj) })
source('~/Dropbox/TrackingNetworkChanges/correction.R')
source('~/Dropbox/TrackingNetworkChanges/correction.R')
source('~/Dropbox/TrackingNetworkChanges/correction.R')
source('~/Dropbox/TrackingNetworkChanges/correction.R')
source('~/Dropbox/TrackingNetworkChanges/correction.R')
source('~/Dropbox/TrackingNetworkChanges/correction.R')
D1=diag(1.0/sqrt(apply(A_new,1,sum)))
D1
D1=(apply(A_new,1,sum))
apply(A_new,1,sum)
apply(AA,1,sum)
D1=diag(1.0/sqrt(apply(AA,1,sum)))
D1
D1[where(is.infinite((D1)))]
D1[which(is.infinite((D1)))]
D1[which(is.infinite((D1)))]=0
D1
N=4
L1=matrix(0,N,N)
L1
diag(L1)=1
L1
source('~/Dropbox/TrackingNetworkChanges/correction.R')
source('~/Dropbox/TrackingNetworkChanges/distances/distances.R')
source('~/Dropbox/TrackingNetworkChanges/correction.R')
source('~/Dropbox/TrackingNetworkChanges/correction.R')
source('~/Dropbox/TrackingNetworkChanges/correction.R')
